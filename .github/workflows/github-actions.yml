# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
# main만 test
on:
  push:
    # branches: [ "main", "develop" ]
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방) ?
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      # 환경별 yml 파일 생성(1) - application.yml
      # - name: make application.yml
      #   if: |
      #     contains(github.ref, 'main') ||
      #     contains(github.ref, 'develop')
      #   run: |
      #     mkdir ./src/main/resources # resources 폴더 생성
      #     cd ./src/main/resources # resources 폴더로 이동
      #     touch ./application.yml # application.yml 생성
      #     echo "${{ secrets.YML }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
      #   shell: bash

      # 환경별 yml 파일 생성(2) - dev
      # - name: make application-dev.yml
      #   if: contains(github.ref, 'develop')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-dev.yml
      #     echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      #   shell: bash

      # 환경별 yml 파일 생성(3) - prod
      # - name: make application-prod.yml
      #   if: contains(github.ref, 'main')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-prod.yml
      #     echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      #   shell: bash

      # gradle build
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test # 테스트 스킵하고 빌드
#        run: ./gradlew build -x test

      # docker build & push to production
      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_USERNAME }}/example01:0.3 는 도커 repository 입니다.
      - name: Docker build & push to prod
#        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/example01:0.3 .
          docker push ${{ secrets.DOCKER_USERNAME }}/example01:0.3
          
      # docker build & push to develop
      # - name: Docker build & push to dev
      #   if: contains(github.ref, 'develop')
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #     docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/example01:0.3 .
      #     docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/example01
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/example01
            sudo docker image prune -f
            
      ## deploy to develop
#      - name: Deploy to dev
#        uses: appleboy/ssh-action@master
#        id: deploy-dev
#        if: contains(github.ref, 'develop')
#        with:
#          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS # EC2의 IP 주소 or DNS
#          username: ${{ secrets.USERNAME }} # ubuntu # 인스턴스 생성 시 선택한 OS의 기본 사용자 이름
#          password: ${{ secrets.PASSWORD }}
#          port: 22
#          key: ${{ secrets.PRIVATE_KEY }} # EC2 생성 시 받은 pem 파일 내용 -> .pem 파일 내용은 nano, vim 등의 편집기 통해 확인
#          script: |
#            sudo docker ps
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
#            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
#            sudo docker image prune -f
